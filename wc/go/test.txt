Skip to main content
Coding Challenges Logo
Coding Challenges
The Coding Challenges
Blog
Courses

Coding Challenges - Intro
Build Your Own wc Tool
Build Your Own JSON Parser
Build Your Own Compression Tool
Build Your Own cut Tool
Build You Own Load Balancer
Build Your Own Sort Tool
Build Your Own Calculator
Build Your Own Redis Server
Build Your Own grep
Build Your Own uniq Tool
Build Your Own Web Server
Build Your Own URL Shortener
Build Your Own diff Tool
Build Your Own Shell
Build Your Own cat Tool
Build Your Own IRC Client
Build Your Own Memcached Server
Build Your Own Spotify Client
Build Your Own Discord Bot
Build Your Own LinkedIn Carousel Generator
Build Your Own Sed
Build Your Own DNS Resolver
Build Your Own Traceroute
Build Your Own Realtime Chat Client and Server
Build Your Own NATS Message Broker
Build Your Own Git
Build Your Own Rate Limiter
Build Your Own NTP Client
Build Your Own Scheduling Automation App
Build Your Own Lisp Interpreter
Build Your Own QR Code Generator
Build Your Own Crontab Tool
Build Your Own head
Build Your Own jq
Build Your Own Google Keep
Build Your Own Pong
Build Your Own Redis CLI Tool
Build Your Own Network Modelling Tool
Build Your Own Social Media Tool
Build Your Own curl
Build Your Own HTTP(S) Load Tester
Build Your Own tr Tool.
Build Your Own Tetris
Build Your Own DNS Forwarder
Build Your Own Port Scanner
Build Your Own yq
Build Your Own Chrome Extension
Build Your Own Data Privacy Vault
Build Your Own Password Cracker
Build Your Own Xargs
Build Your Own HTTP Forward Proxy Server
Build Your Own Docker
Build Your Own Spell Checker Using A Bloom Filter
Build Your Own Tar
Build Your Own wc Tool
Build Your Own wc Tool
This challenge is to build your own version of the Unix command line tool wc!

The Unix command line tools are a great metaphor for good software engineering and they follow the Unix Philosophies of:

Writing simple parts connected by clean interfaces - each tool does just one thing and provides a simple CLI that handles text input from either files or file streams.
Design programs to be connected to other programs - each tool can be easily connected to other tools to create incredibly powerful compositions.
Following these philosophies has made the simple unix command line tools some of the most widely used software engineering tools - allowing us to create very complex text data processing pipelines from simple command line tools. There’s even a Coursera course on Linux and Bash for Data Engineering.

You can read more about the Unix Philosophy in the excellent book The Art of Unix Programming.

The Challenge - Building wc
The functional requirements for wc are concisely described by it’s man page - give it a go in your local terminal now:

man wc
The TL/DR version is: wc – word, line, character, and byte count. You can see the result in action in the video below:


Step Zero
Like all good software engineering we’re zero indexed! In this step you’re going to set your environment up ready to begin developing and testing your solution.

I’ll leave you to setup your IDE / editor of choice and programming language of choice. After that here’s what I’d like you to do to be ready to test your solution.

Download the this text and save it as test.txt.

Step One
In this step your goal is to write a simple version of wc, let’s call it ccwc (cc for Coding Challenges) that takes the command line option -c and outputs the number of bytes in a file.

If you’ve done it right your output should match this:

>ccwc -c test.txt
  342190 test.txt
If it doesn’t, check your code, fix any bugs and try again. If it does, congratulations! On to…

Step Two
In this step your goal is to support the command line option -l that outputs the number of lines in a file.

If you’ve done it right your output should match this:

>ccwc -l test.txt
    7145 test.txt
If it doesn’t, check your code, fix any bugs and try again. If it does, congratulations! On to…

Step Three
In this step your goal is to support the command line option -w that outputs the number of words in a file. If you’ve done it right your output should match this:

>ccwc -w test.txt
   58164 test.txt
If it doesn’t, check your code, fix any bugs and try again. If it does, congratulations! On to…

Step Four
In this step your goal is to support the command line option -m that outputs the number of characters in a file. If the current locale does not support multibyte characters this will match the -c option.

You can learn more about programming for locales here

For this one your answer will depend on your locale, so if can, use wc itself and compare the output to your solution:

>wc -m test.txt
  339292 test.txt

>ccwc -m test.txt
  339292 test.txt
If it doesn’t, check your code, fix any bugs and try again. If it does, congratulations! On to…

Step Five
In this step your goal is to support the default option - i.e. no options are provided, which is the equivalent to the -c, -l and -w options. If you’ve done it right your output should match this:

>ccwc test.txt
    7145   58164  342190 test.txt
If it doesn’t, check your code, fix any bugs and try again. If it does, congratulations! On to…

The Final Step
In this step your goal is to support being able to read from standard input if no filename is specified. If you’ve done it right your output should match this:

>cat test.txt | ccwc -l
    7145
If it doesn’t, check your code, fix any bugs and try again. If it does, congratulations! You’ve done it, pat yourself on the back, job well done!

Help Others by Sharing Your Solutions!
If you think your solution is an example other developers can learn from please share it, put it on GitHub, GitLab or elsewhere. Then let me know - ping me a message via Twitter or LinkedIn or just post about it there and tag me.

Get The Challenges By Email
If you would like to recieve the coding challenges by email, you can subscribe to the weekly newsletter on SubStack here:


Tags:unixbeginner
Previous
Coding Challenges - Intro
Next
Build Your Own JSON Parser
The Challenge - Building wc
Step Zero
Step One
Step Two
Step Three
Step Four
Step Five
The Final Step
Help Others by Sharing Your Solutions!
Get The Challenges By Email
Challenges
Coding Challenges
Community
Discord
LinkedIn
YouTube
Facebook
More
Coding Challenges Blog
Developer Roadmaps
Learn Go
Copyright © 2023,2024 Coding Challenges.
